// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: surf/surf/world_id_to_user.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorldIdtoUser struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	User    string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	WorldId string `protobuf:"bytes,3,opt,name=worldId,proto3" json:"worldId,omitempty"`
}

func (m *WorldIdtoUser) Reset()         { *m = WorldIdtoUser{} }
func (m *WorldIdtoUser) String() string { return proto.CompactTextString(m) }
func (*WorldIdtoUser) ProtoMessage()    {}
func (*WorldIdtoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_745f28dfa29a6f73, []int{0}
}
func (m *WorldIdtoUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorldIdtoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorldIdtoUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorldIdtoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorldIdtoUser.Merge(m, src)
}
func (m *WorldIdtoUser) XXX_Size() int {
	return m.Size()
}
func (m *WorldIdtoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_WorldIdtoUser.DiscardUnknown(m)
}

var xxx_messageInfo_WorldIdtoUser proto.InternalMessageInfo

func (m *WorldIdtoUser) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *WorldIdtoUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *WorldIdtoUser) GetWorldId() string {
	if m != nil {
		return m.WorldId
	}
	return ""
}

func init() {
	proto.RegisterType((*WorldIdtoUser)(nil), "surf.surf.WorldIdtoUser")
}

func init() { proto.RegisterFile("surf/surf/world_id_to_user.proto", fileDescriptor_745f28dfa29a6f73) }

var fileDescriptor_745f28dfa29a6f73 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x2e, 0x2d, 0x4a,
	0xd3, 0x07, 0x13, 0xe5, 0xf9, 0x45, 0x39, 0x29, 0xf1, 0x99, 0x29, 0xf1, 0x25, 0xf9, 0xf1, 0xa5,
	0xc5, 0xa9, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x20, 0x49, 0x3d, 0x10, 0xa1,
	0x14, 0xcc, 0xc5, 0x1b, 0x0e, 0x52, 0xe4, 0x99, 0x52, 0x92, 0x1f, 0x5a, 0x9c, 0x5a, 0x24, 0x24,
	0xc2, 0xc5, 0x9a, 0x99, 0x97, 0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1,
	0x08, 0x09, 0x71, 0xb1, 0x80, 0xf4, 0x4b, 0x30, 0x81, 0x05, 0xc1, 0x6c, 0x21, 0x09, 0x2e, 0xf6,
	0x72, 0x88, 0x56, 0x09, 0x66, 0xb0, 0x30, 0x8c, 0xeb, 0xa4, 0x7d, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x82, 0x60, 0x67, 0x55, 0x40, 0x5c, 0x57, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0x76, 0x93, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xc2, 0xbd, 0x73, 0xb7,
	0x00, 0x00, 0x00,
}

func (m *WorldIdtoUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldIdtoUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorldIdtoUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorldId) > 0 {
		i -= len(m.WorldId)
		copy(dAtA[i:], m.WorldId)
		i = encodeVarintWorldIdToUser(dAtA, i, uint64(len(m.WorldId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintWorldIdToUser(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintWorldIdToUser(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorldIdToUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorldIdToUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorldIdtoUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovWorldIdToUser(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovWorldIdToUser(uint64(l))
	}
	l = len(m.WorldId)
	if l > 0 {
		n += 1 + l + sovWorldIdToUser(uint64(l))
	}
	return n
}

func sovWorldIdToUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorldIdToUser(x uint64) (n int) {
	return sovWorldIdToUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorldIdtoUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldIdToUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldIdtoUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldIdtoUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldIdToUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldIdToUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldIdToUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorldId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorldIdToUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorldIdToUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorldIdToUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorldIdToUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorldIdToUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorldIdToUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorldIdToUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorldIdToUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorldIdToUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorldIdToUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorldIdToUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorldIdToUser = fmt.Errorf("proto: unexpected end of group")
)
